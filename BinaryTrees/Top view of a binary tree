class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static class Info
    {
        Node node; 
        int hd; 
        
        Info(Node node, int hd)
        {
            this.node = node; 
            this.hd = hd; 
        }
    }
    
    static ArrayList<Integer> topView(Node root) {
 
        Queue<Info> q = new LinkedList<>();
        q.add(new Info(root, 0)); 
        
        HashMap<Integer, Integer> hm = new HashMap<>(); 
        
        ArrayList<Integer> result = new ArrayList<>(); 
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE; 
        
        while(!q.isEmpty())
        {
            Info curr = q.poll();
            if(curr.node != null)
            {
                if(!hm.containsKey(curr.hd))
                {
                    hm.put(curr.hd, curr.node.data); 
                    min = Math.min(min,curr.hd);
                    max = Math.max(max, curr.hd); 
                }
                
                if(curr.node.left != null)
                {
                    q.add(new Info(curr.node.left, curr.hd -1)); 
                }
                
                if(curr.node.right != null)
                {
                    q.add( new Info(curr.node.right, curr.hd + 1)); 
                }
            }
        }
        
        for(int i = min; i<= max; i++)
        {
            result.add(hm.get(i)); 
        }
        
        return result; 
        
    }
}
